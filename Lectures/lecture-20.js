'use strict';
// WHICH ARRAY METHOD TO USE:
// WE HAVE STUDIED 23 DIFFERENT ARRAY METHODS.
// EACH ARRAY HAS DIFFRENT FUNCTIONALITY.
// SOME OF THE ARRAY METHODS MUTATES THE ORIGINAL ARRAY WHILE OTHERS CREATE AN ENTIRE NEW ARRAY.
// WE USED SOME ARRAY METHODS TO FIND THE INDEX OF AN ELEMENT IN TH ARRAY AND ALSO TO FIND THE ELEMENT ITSELF.

// WE ALSO USED METHODS TO KNOW IF A CERTAIN ELEMENT IS PRESENT OR INCLUDED OR NOT .
// WE JOIN EVERY ELEMENT WITH STRING.
// WE TRANSFORM THE ENTIRE ELEMENTS INTO A VALUE USING ACCUMULATOR.
// WE USED METHOD TO LOOP OVER THE ENTIRE ARRAY BASED ON CALL BACK FUNCTION AND WHICH ALSO DOESN'T CREATE A NEW ARRAY AND JUST LOOP OVER IT.

// HERE IS THE LIST OF THOSE USEFUL 23 METHODS:

/*  TO MUTATE THE ORIGINAL ARRAY:

-> ADD TO ORIGINAL:

 .push() (end)
 .unshift() (start)


-> REMOVE FROM ORIGINAL:

 .pop() (end)
 .shift() (start)
 .splice() (any)


-> OTHERS:

 .reverse()
 .sort()
 .fill()

*/

/* A NEW ARRAY:

-> COMPUTED FROM ORIGINAL:
 .map() loop.

-> FILTERED USING CONDITION:
 .filter()

-> PORTION OF ORIGINAL:
 .slice()

-> ADDING ORIGINAL TO OTHER:
 .concat()

-> FLATTENING THE ORIGINAL:
 .flat()
 .flatMap()

*/

/* AN ARRAY INDEX:

-> BASED ON VALUE:
 .indexOf()

-> BASED ON TEST CONDITION:
 .findIndex()


-> AN ARRAY ELEMENT:
 BASED ON TEST CONDITION:
 .find()

-> KNOW IF ARRAY INCLUDES:
BASED ON VALUE:
 .includes()

BASED ON TEST CONDITION:
 .some()
 .every()

 -> A NEW STRING:
BASED ON SEPARATOR STRING:
 .join()

-> TO TRANSFORM TO VALUE:
 BASED ON ACCUMULATOR.
 .reduce() (BOIL DOWN ARRAY TO SINGLE VALUE OF ANY TYPE; NUMBER,STRING,BOOLEAN, OR EVEN NEW ARRAY OR OBJECT.)

-> TO JUST LOOP ARRAY:
 BASED ON CALLBACK:
  .forEach() DO NOT CREATE A NEW ARRAY , JUST LOOP OVER IT.
*/
